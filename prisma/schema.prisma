generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  start           DateTime?
  end             DateTime?
  roomPreferences RoomPreferences?
  entries         Entry[]
  User            User             @relation(fields: [createdBy], references: [id])
  createdBy       Int
}

model RoomPreferences {
  id             Int      @id @default(autoincrement())
  updatedAt      DateTime @updatedAt
  private        Boolean  @default(false)
  publicAfterEnd Boolean  @default(true)
  title          String   @db.VarChar(255)
  description    String?
  code           String?  @db.VarChar(20)
  room           Room     @relation(fields: [roomId], references: [id])
  roomId         Int      @unique
  audioSample    String?
}

model Entry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  profile   Profile?
  entries   Entry[]
  rooms     Room[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  socials   Social[]
}

model Social {
  id         Int                  @id @default(autoincrement())
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  platform   SocialMediaPlatform? @relation(fields: [platformId], references: [id])
  platformId Int?
  name       String?
  link       String?
  profile    Profile              @relation(fields: [profileId], references: [id])
  profileId  Int                  @unique
}

model SocialMediaPlatform {
  id     Int      @id @default(autoincrement())
  name   String
  icon   String?
  social Social[]
}
